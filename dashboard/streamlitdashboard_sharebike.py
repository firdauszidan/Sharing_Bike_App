# -*- coding: utf-8 -*-
"""StreamlitDashboard_ShareBike.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gAB_vEJ4m9oMe4lwBchzqzyqRJp8JsO6
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import streamlit as st
from datetime import datetime
sns.set_theme(style='white')

weather_labels = {1: "Light", 2: "Cloudy & Mist", 3: "Light Rain"}
holiday_labels = {0: "Weekdays", 1: "Holidays"}

def create_weathermax(df):
    weathersit_max = df.groupby(by="weathersit_d").agg({
        "cnt_d": "max",
    }).reset_index()
    weathersit_max['weathersit_d'] = weathersit_max['weathersit_d'].map(weather_labels)
    return weathersit_max

def create_holidaymax(df):
    holiday_max = df.groupby(by="holiday_d").agg({
        "cnt_d": "max",
    }).reset_index()
    holiday_max['holiday_d'] = holiday_max['holiday_d'].map(holiday_labels)
    return holiday_max

def create_reghour(df):
    reg_hour = df.groupby(by="hr").agg({
        "registered_h": "mean",
    }).reset_index()
    return reg_hour

all_df = pd.read_csv("dffix_clean.csv")

st.sidebar.title("Filters")

start_date = st.sidebar.date_input("Start Date", pd.to_datetime(all_df['dteday'].min()))
end_date = st.sidebar.date_input("End Date", pd.to_datetime(all_df['dteday'].max()))
selected_weather = st.sidebar.multiselect(
    "Weather Conditions", options=list(weather_labels.values()), default=list(weather_labels.values())
)

filtered_df = all_df[(pd.to_datetime(all_df['dteday']) >= pd.to_datetime(start_date)) &
                     (pd.to_datetime(all_df['dteday']) <= pd.to_datetime(end_date)) &
                     (all_df['weathersit_d'].map(weather_labels).isin(selected_weather))]

weathersit_max = create_weathermax(filtered_df)
holiday_max = create_holidaymax(filtered_df)
reg_hour = create_reghour(filtered_df)

st.title("Dashboard: Bike Sharing")

st.subheader("The Impact of Weather on the Number of Bicycles Borrowed")

col1, col2, col3 = st.columns(3)
with col1:
    st.metric(label="Light", value=weathersit_max.loc[weathersit_max['weathersit_d'] == "Light", 'cnt_d'].max())
with col2:
    st.metric(label="Cloudy & Mist", value=weathersit_max.loc[weathersit_max['weathersit_d'] == "Cloudy & Mist", 'cnt_d'].max())
with col3:
    st.metric(label="Light Rain", value=weathersit_max.loc[weathersit_max['weathersit_d'] == "Light Rain", 'cnt_d'].max())

fig = plt.figure(figsize=(10, 8))
colors = ["#4381C1", "#8097D6", "#9FA2E0"]
sns.barplot(
    y="weathersit_d",
    x="cnt_d",
    orient="h",
    data=weathersit_max,
    palette=colors
)
plt.xlabel("Number of bicycles borrowed")
plt.ylabel("Weather Situation")
plt.title("The Impact of Weather on the Number of Bicycles Borrowed")
st.pyplot(fig)

st.subheader("Max Volume of Bikes Borrowed Between Weekdays and Holidays")

col1, col2 = st.columns(2)
with col1:
    st.metric(label="Weekdays", value=holiday_max.loc[holiday_max['holiday_d'] == "Weekdays", 'cnt_d'].max())
with col2:
    st.metric(label="Holidays", value=holiday_max.loc[holiday_max['holiday_d'] == "Holidays", 'cnt_d'].max())

fig = plt.figure(figsize=(10, 7))
colors = ["#B18D9A", "#BEA2C2"]
sns.barplot(
    x="holiday_d",
    y="cnt_d",
    data=holiday_max,
    palette=colors
)
plt.xlabel("Day")
plt.ylabel("Number of bicycles borrowed")
plt.title("Max Volume of Bikes Borrowed Between Weekdays and Holidays")
st.pyplot(fig)

st.subheader("Average registered bicycle users per hour")

fig = plt.figure(figsize=(8, 5.5))
colors = ["#B9C244"]
sns.barplot(
    x="hr",
    y="registered_h",
    data=reg_hour,
    palette=colors * 24,
)
plt.xlabel("Hours")
plt.ylabel("Number of registered users")
plt.title("Average registered bicycle users per hour")
st.pyplot(fig)